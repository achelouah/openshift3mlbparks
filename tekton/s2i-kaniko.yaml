---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-kaniko
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/tags: image-build
spec:
  description: >-
    Source-to-Image (S2I) is a toolkit and workflow for building reproducible
    container images from source code

    S2I produces images by injecting source code into a base S2I container image
    and letting the container prepare that source code for execution. The base
    S2I container images contains the language runtime and build tools needed for
    building and running the source code.

  params:
  - name: BUILDER_IMAGE
    description: The location of the s2i builder image.
  - name: IMAGE_NAME
    description: Reference of the image S2I will produce.
  - name: PATH_CONTEXT
    description: The location of the path to run s2i from.
    default: .
  - name: TLSVERIFY
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    default: "true"
  - name: LOGLEVEL
    description: Log level when running the S2I binary
    default: "0"
  - name: IMAGE_SCRIPTS_URL
    description: Specify a URL containing the default assemble and run scripts for the builder image
    default: "image:///usr/libexec/s2i"
  - name: DOCKERFILE
    description: Path to the Dockerfile to build.
    default: ./Dockerfile
  - name: CONTEXT
    description: The build context used by Kaniko.
    default: ./
  - name: EXTRA_ARGS
    default: ""
  - name: KANIKO_BUILDER_IMAGE
    description: The image on which builds will run
    default: gcr.io/kaniko-project/executor:latest

  workspaces:
  - name: source
  - name: sslcertdir
    mountPath: /kaniko/ssl/certs/
  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built.
  steps:
  - name: clean
    image: dune.registry.aosc-portal.com:8443/ach/s2i-centos8:1.3.1-1.3
    workingDir: $(workspaces.source.path)
    script: |
      #!/bin/sh
      set -eu -o pipefail
      set -x
      
      CHECKOUT_DIR="$(workspaces.source.path)"
      
      cleandir() {
        # Delete any existing contents of the repo directory if it exists.
        #
        # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
        # or the root of a mounted volume.
        if [[ -d "$CHECKOUT_DIR" ]] ; then
          # Delete non-hidden files and directories
          rm -rf "$CHECKOUT_DIR"/*
          # Delete files and directories starting with . but excluding ..
          rm -rf "$CHECKOUT_DIR"/.[!.]*
        fi
      }
      
      cleandir
    securityContext:
      runAsUser: 0
  - name: generate
    image: dune.registry.aosc-portal.com:8443/ach/s2i-centos8:1.3.1-1.3
    workingDir: $(workspaces.source.path)
    command:
    - /usr/local/bin/s2i
    - --loglevel=$(params.LOGLEVEL)
    - build
    - $(params.PATH_CONTEXT)
    - $(params.BUILDER_IMAGE)
    - --image-scripts-url
    - $(params.IMAGE_SCRIPTS_URL)
    - --as-dockerfile
    - $(workspaces.source.path)/Dockerfile
    securityContext:
      runAsUser: 0
  - name: display
    image: dune.registry.aosc-portal.com:8443/ach/s2i-centos8:1.3.1-1.3
    workingDir: $(workspaces.source.path)
    command:
    - cat
    - $(workspaces.source.path)/Dockerfile
    securityContext:
      runAsUser: 0
  - name: build-and-push
    #workingDir: /gen-source
    workingDir: $(workspaces.source.path)
    image: $(params.KANIKO_BUILDER_IMAGE)
    # specifying DOCKER_CONFIG is required to allow kaniko to detect docker credential
    # https://github.com/tektoncd/pipeline/pull/706
    env:
    - name: DOCKER_CONFIG
      value: /tekton/home/.docker
    command:
    - /kaniko/executor
    - $(params.EXTRA_ARGS)
    - --dockerfile=$(params.DOCKERFILE)
    - --context=$(workspaces.source.path)/$(params.CONTEXT)  # The user does not need to care the workspace and the source.
    - --destination=$(params.IMAGE_NAME)
    - --oci-layout-path=$(workspaces.source.path)/$(params.CONTEXT)/image-digest
    # kaniko assumes it is running as root, which means this example fails on platforms
    # that default to run containers as random uid (like OpenShift). Adding this securityContext
    # makes it explicit that it needs to run as root.
    securityContext:
      runAsUser: 0
  - name: write-digest
    workingDir: $(workspaces.source.path)
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/imagedigestexporter:v0.16.2
    # output of imagedigestexport [{"key":"digest","value":"sha256:eed29..660","resourceRef":{"name":"myrepo/myimage"}}]
    command: ["/ko-app/imagedigestexporter"]
    args:
    - -images=[{"name":"$(params.IMAGE_NAME)","type":"image","url":"$(params.IMAGE_NAME)","digest":"","OutputImageDir":"$(workspaces.source.path)/$(params.CONTEXT)/image-digest"}]
    - -terminationMessagePath=$(params.CONTEXT)/image-digested
    securityContext:
      runAsUser: 0
  - name: digest-to-results
    workingDir: $(workspaces.source.path)
    image: docker.io/stedolan/jq@sha256:a61ed0bca213081b64be94c5e1b402ea58bc549f457c2682a86704dd55231e09
    script: |
      cat $(params.CONTEXT)/image-digested | jq '.[0].value' -rj | tee /tekton/results/IMAGE-DIGEST
    securityContext:
      runAsUser: 0
